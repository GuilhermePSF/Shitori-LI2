        -:    0:Source:src/verifica.c
        -:    0:Graph:test_verifica-verifica.gcno
        -:    0:Data:test_verifica-verifica.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdbool.h>
        -:    3:#include "verifica.h"
        -:    4:
        -:    5:/*
        -:    6: verificarRestricoes:
        -:    7:   - Regra 1: Em cada linha, não pode haver duas letras maiúsculas iguais.
        -:    8:   - Regra 2: Em cada coluna, não pode haver duas letras maiúsculas iguais.
        -:    9:   - Regra 3: Para cada célula riscada ('#'), todos os vizinhos ortogonais dentro do tabuleiro
        -:   10:     devem ser letras brancas (maiúsculas).
        -:   11:
        -:   12: */
        -:   13:
function verificarRestricoes called 6 returned 100% blocks executed 100%
        6:   14:int verificarRestricoes(const Tabuleiro *tab)
        -:   15:{
        6:   16:    int rows = tab->linhas;
        6:   17:    int cols = tab->colunas;
        6:   18:    int ok = 1;
        -:   19:
        -:   20:    // Regra 1:
       21:   21:    for (int i = 0; i < rows; i++)
branch  0 taken 15
branch  1 taken 6 (fallthrough)
        -:   22:    {
       15:   23:        bool seen[26] = {false};
call    0 returned 15
       60:   24:        for (int j = 0; j < cols; j++)
branch  0 taken 45
branch  1 taken 15 (fallthrough)
        -:   25:        {
       45:   26:            char c = tab->grelha[i][j];
       45:   27:            if (c >= 'A' && c <= 'Z')
branch  0 taken 29 (fallthrough)
branch  1 taken 16
        -:   28:            {
       29:   29:                int idx = c - 'A';
       29:   30:                if (seen[idx])
branch  0 taken 1 (fallthrough)
branch  1 taken 28
        -:   31:                {
        1:   32:                    char col_label = 'a' + j;
        1:   33:                    printf("Violação: letra '%c' repetida na linha %d, coluna %c\n", c, i + 1, col_label);
call    0 returned 1
        1:   34:                    ok = 0;
call    0 returned 1
        -:   35:                }
        -:   36:                else
        -:   37:                {
       28:   38:                    seen[idx] = true;
        -:   39:                }
        -:   40:            }
        -:   41:        }
        -:   42:    }
        -:   43:
        -:   44:    // Regra 2:
       21:   45:    for (int j = 0; j < cols; j++)
branch  0 taken 15
branch  1 taken 6 (fallthrough)
        -:   46:    {
       15:   47:        bool seen[26] = {false};
call    0 returned 15
       60:   48:        for (int i = 0; i < rows; i++)
branch  0 taken 45
branch  1 taken 15 (fallthrough)
        -:   49:        {
       45:   50:            char c = tab->grelha[i][j];
       45:   51:            if (c >= 'A' && c <= 'Z')
branch  0 taken 29 (fallthrough)
branch  1 taken 16
        -:   52:            {
       29:   53:                int idx = c - 'A';
       29:   54:                if (seen[idx])
branch  0 taken 1 (fallthrough)
branch  1 taken 28
        -:   55:                {
        1:   56:                    char col_label = 'a' + j;
        1:   57:                    printf("Violação: letra '%c' repetida na coluna %c, linha %d\n", c, col_label, i + 1);
call    0 returned 1
        1:   58:                    ok = 0;
call    0 returned 1
        -:   59:                }
        -:   60:                else
        -:   61:                {
       28:   62:                    seen[idx] = true;
        -:   63:                }
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:    // Regra 3:
        6:   69:    int dr[4] = {-1, 1, 0, 0};
call    0 returned 6
        6:   70:    int dc[4] = {0, 0, -1, 1};
call    0 returned 6
       21:   71:    for (int i = 0; i < rows; i++)
branch  0 taken 15 (fallthrough)
branch  1 taken 6
        -:   72:    {
       60:   73:        for (int j = 0; j < cols; j++)
branch  0 taken 45
branch  1 taken 15 (fallthrough)
        -:   74:        {
       45:   75:            if (tab->grelha[i][j] == '#')
branch  0 taken 5 (fallthrough)
branch  1 taken 40
        -:   76:            {
        5:   77:                char self_col = 'a' + j;
        5:   78:                int self_row = i + 1;
       25:   79:                for (int d = 0; d < 4; d++)
branch  0 taken 20
branch  1 taken 5 (fallthrough)
        -:   80:                {
       20:   81:                    int ni = i + dr[d];
       20:   82:                    int nj = j + dc[d];
       20:   83:                    if (ni >= 0 && ni < rows && nj >= 0 && nj < cols)
branch  0 taken 16 (fallthrough)
branch  1 taken 4
branch  2 taken 16 (fallthrough)
branch  3 taken 0
        -:   84:                    {
       16:   85:                        char nb = tab->grelha[ni][nj];
       16:   86:                        if (!(nb >= 'A' && nb <= 'Z'))
branch  0 taken 5 (fallthrough)
branch  1 taken 11
        -:   87:                        {
        5:   88:                            char neigh_col = 'a' + nj;
        5:   89:                            int neigh_row = ni + 1;
        5:   90:                            printf("Violação: célula riscada em %c%d tem vizinho inválido em %c%d: '%c'\n",
call    0 returned 5
        -:   91:                                   self_col, self_row, neigh_col, neigh_row, nb);
        5:   92:                            ok = 0;
call    0 returned 5
        -:   93:                        }
        -:   94:                    }
        -:   95:                }
        -:   96:            }
        -:   97:        }
        -:   98:    }
        -:   99:
        6:  100:    return ok;
call    0 returned 6
        -:  101:}
